syntax = "proto3";

package api.proto.v1;

option go_package = "github.com/a-x-a/go-metric/pkg/grpcapi";

// Metric тип описывающий метрику.
message Metric {
  string id = 1; // имя метрики
  string mtype = 2; // тип метрики
  oneof value {
    int64 counter = 3; // значение метрики типа счётчик
    double gauge = 4; // значение метрики типа датчик
  }
}

// GetRequest тип описывающий структуру запроса для получения текущего значения метрики.
message GetRequest {
  string id = 1;
  string mtype = 2;
}

// GetResponse  тип описывающий структуру ответа на запрос о получении текущего значения метрики.
message GetResponse {
  Metric metric = 1;
}

// UpdateRequest тип описывающий структуру запроса на обновление текущего значения метрики.
message UpdateRequest {
  Metric metric = 1;
}

// UpdateRequest тип описывающий структуру ответа на запрос на обновление текущего значения метрики.
message UpdateResponse {
  Metric metric = 1;
}

// UpdateBatchRequest тип описывающий структуру запроса на обновление текущих значений метрик.
message UpdateBatchRequest {
  repeated Metric data = 1;
}

// UpdateBatchResponse тип описывающий структуру ответа на запроса на обновление текущих значений метрик.
message UpdateBatchResponse {}

// Metrics описание интерфейса сервиса MetricService.
service MetricsService {
  // Get получает текущее значение метрики с указанным именем и типом.
  rpc Get(GetRequest) returns (GetResponse);
  // Update обновляет значение метрики.
  rpc Update(UpdateRequest) returns (UpdateResponse);
  // UpdateBatch обновляет значение набора метрик.
  rpc UpdateBatch(UpdateBatchRequest) returns (UpdateBatchResponse);
}
