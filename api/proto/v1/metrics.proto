syntax = "proto3";

package api.proto.v1;

option go_package = "github.com/a-x-a/go-metric/pkg/grpcapi";

// Metric тип описывающий метрику.
message Metric {
  string id = 1; // имя метрики
  string mtype = 2; // тип метрики
  oneof value{
    int64 counter = 3; // значение метрики типа счётчик
    double gauge = 4; // значение метрики типа датчик
  }
}

// MetricsGetRequest тип описывающий структуру запроса для получения текущего значения метрики.
message MetricsGetRequest {
  string id = 1;
  string mtype = 2;
}

// MetricsGetResponse  тип описывающий структуру ответа на запрос о получении текущего значения метрики.
message MetricsGetResponse {
  Metric metric = 1;
}

// MetricsUpdateRequest тип описывающий структуру запроса на обновление текущего значения метрики.
message MetricsUpdateRequest {
   Metric metric = 1;
}

// MetricsUpdateRequest тип описывающий структуру ответа на запрос на обновление текущего значения метрики.
message MetricsUpdateResponse {
  Metric metric = 1;
}

// MetricsUpdateBatchRequest тип описывающий структуру запроса на обновление текущих значений метрик.
message MetricsUpdateBatchRequest {
  repeated Metric data = 1;
}

// MetricsUpdateBatchResponse тип описывающий структуру ответа на запроса на обновление текущих значений метрик.
message MetricsUpdateBatchResponse {}

// Metrics описание интерфейса сервиса MetricService.
service MetricsService {
  // Get получает текущее значение метрики с указанным именем и типом.
  rpc Get(MetricsGetRequest) returns (MetricsGetResponse);
  // Update обновляет значение метрики.
  rpc Update(MetricsUpdateRequest) returns (MetricsUpdateResponse);
  // UpdateBatch обновляет значение набора метрик.
  rpc UpdateBatch(MetricsUpdateBatchRequest) returns (MetricsUpdateBatchResponse);
}
