// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\storage\pgdb.go
//
// Generated by this command:
//
//	mockgen -destination=.\internal\storage\pgdb_mock.go -package=storage -source=.\internal\storage\pgdb.go
//

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDataBase is a mock of DataBase interface.
type MockDataBase struct {
	ctrl     *gomock.Controller
	recorder *MockDataBaseMockRecorder
}

// MockDataBaseMockRecorder is the mock recorder for MockDataBase.
type MockDataBaseMockRecorder struct {
	mock *MockDataBase
}

// NewMockDataBase creates a new mock instance.
func NewMockDataBase(ctrl *gomock.Controller) *MockDataBase {
	mock := &MockDataBase{ctrl: ctrl}
	mock.recorder = &MockDataBaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataBase) EXPECT() *MockDataBaseMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDataBase) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDataBaseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDataBase)(nil).Close))
}

// Get mocks base method.
func (m *MockDataBase) Get(ctx context.Context, name string) (*Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name)
	ret0, _ := ret[0].(*Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDataBaseMockRecorder) Get(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDataBase)(nil).Get), ctx, name)
}

// GetAll mocks base method.
func (m *MockDataBase) GetAll(ctx context.Context) ([]Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockDataBaseMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDataBase)(nil).GetAll), ctx)
}

// Ping mocks base method.
func (m *MockDataBase) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockDataBaseMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDataBase)(nil).Ping), ctx)
}

// Push mocks base method.
func (m *MockDataBase) Push(ctx context.Context, name string, record Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", ctx, name, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockDataBaseMockRecorder) Push(ctx, name, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockDataBase)(nil).Push), ctx, name, record)
}

// PushBatch mocks base method.
func (m *MockDataBase) PushBatch(ctx context.Context, records []Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushBatch", ctx, records)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushBatch indicates an expected call of PushBatch.
func (mr *MockDataBaseMockRecorder) PushBatch(ctx, records any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushBatch", reflect.TypeOf((*MockDataBase)(nil).PushBatch), ctx, records)
}
